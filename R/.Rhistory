str(airquality)
mapping = aes(x = Day, y = Temp)
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)
g<-ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)
# x축은 Day 열, y축은 Temp 열로 맵핑1
ggplot(data = iris ,
mapping = aes(x = Sepal.Length ,
y = Sepal.Width))
ggplot(data = iris ,
mapping = aes(x = Sepal.Length ,
y = Sepal.Width))
g<-ggplot(data = airquality,
mapping = aes(x = Day, y = Temp))
g
# 산점도 그리기
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_point()
# 크기를 3, 색상을 빨강으로 적용하여 산점도 그리기
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_point(size = 3,
color = 'red')
# x축을 Day, y축을 Temp로 맵핑한 후 꺾은선그래프 그리기
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_abline(size = 3,
color = 'red')
# x축을 Day, y축을 Temp로 맵핑한 후 꺾은선그래프 그리기
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_hline(size = 3,
color = 'red')
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_hline(size = 3,
color = 'red')
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_vline(size = 3,
color = 'red')
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_line(aes(x = Day, y = Temp))
# x축을 Day, y축을 Temp로 맵핑한 후 꺾은선그래프와 산점도 그리기
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_line(aes(x = Day, y = Temp)) +
geom_point()
# 꺾은선그래프 색상을 빨간색과 산점도 크기를 3으로 변경하고 겹쳐 그리기
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_line(aes(x = Day, y = Temp),
color= 'red') +
geom_point(size = 3)
# 상자그림 그리기
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
annotate()
# airquality에서 Temp의 히스토그램
gplot(hist.df) +
geom_histogram()
# airquality에서 Temp의 히스토그램
gplot(airquality에서) +
geom_histogram()
gplot(airquality) +
geom_histogram()
ggplot(airquality) +
geom_histogram()
ggplot(data = airquality,
mapping = aes(x = Day, y = Temp)) +
geom_histogram()
airquality
# airquality에서 Temp의 히스토그램
ggplot(data = airquality,
mapping = aes(x = Day, fill = Temp)) +
geom_histogram()
hist.df <- data.frame(
gender = factor(rep(c('F' , 'M') , each = 200)),
weight = round( c( rnorm(200 , mean=55 , sd=5) , rnorm(200 , mean=65 , sd=5) ))
)
hist.df <- data.frame(
gender = factor(rep(c('F' , 'M') , each = 200)),
weight = round( c( rnorm(200 , mean=55 , sd=5) , rnorm(200 , mean=65 , sd=5) ))
)
ggplot(hist.df) +
geom_histogram(aes(x = weight , fill = gender) )
ggplot(hist.df) +
geom_histogram(aes(x = weight , fill = gender) ,
bins = 20  ,
binwidth = 5)
tmp.df <- data.frame(
years = c(2015, 2016, 2017, 2018, 2019, 2020, 2021) ,
gdp   = c(300, 350, 400, 450, 500, 550, 600)
)
tmp.df
ggplot(data = tmp.df,
aes(x = years , y = gdp)) +
geom_point(shape = 24 , size = 5 , color = 'red')
rownames(tmp.df) <- letters[1:7]
ggplot(data = tmp.df,
aes(x = years , y = gdp)) +
geom_point(shape = 24 , size = 5 , color = 'red') +
geom_text(label = rownames(tmp.df))
ggplot(data = data3) +
geom_boxplot(aes(x = num , y=weight) ,
outlier.color = 'red' ,
outlier.shape = 24 ,
outlier.size = 2) +
coord_flip()
library(ggplot2)
midwest
midwest
midwest.df <- as.data.frame(midwest)
str(midwest.df)
names(midwest.df)
head(midwest.df)
str(midwest.df)
midwest.df <- as.data.frame(midwest)
str(midwest.df)
names(midwest.df)
head(midwest.df)
names(midwest.df)
#전체인구(poptotal) -> total
#
library(dplyr)
midwest.df <- rename_vars(midwest.df, total = poptotal)
midwest.df
names(midwest.df)
midwest.df <- rename_vars(midwest.df, total = poptotal)
midwest.df <- rename(midwest.df, total = poptotal)
midwest.df
names(midwest.df)
midwest.df <- rename(midwest.df, asian = popasian)
midwest.df %>%
mutate(percasian = asian/total)
names(midwest.df)
midwest.df$percasian
table(midwest.df$percasian)
hist(table(midwest.df$percasian))
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 25)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 100)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 25)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 40)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 1)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 20)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 40)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 100)
hist(prop.table(midwest.df$percasian) ,
prob = T ,
breaks = 100) #눈금지정
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 100) #눈금지정
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 25) #눈금지정
table(midwest.df$percasian)
hist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 25)
ist(prop.table(midwest.df$percasian) ,
prob = F ,
breaks = 25
mutate(mean = ifelse(percasian > mean(percasian), 'over',under)
midwest.df %>%
mutate(mean = ifelse(percasian > mean(percasian), 'over',under)
midwest.df %>%
mutate(mean = ifelse(percasian > mean(percasian), 'over',under))
mutate(mean = ifelse(percasian > mean(percasian), 'over',under))
midwest.df %>%
mutate(mean = ifelse(percasian> mean(percasian), 'over',under))
midwest.df %>%
mutate(mean = ifelse(percasian> mean(percasian), 'over','under'))
#빈도확인
table(midwest.df$mean)
table(midwest.df$mean)
table(midwest.df$mean)
barplor(table(midwest.df$mean))
#빈도확인
library(ggplot2)
barplor(table(midwest.df$mean))
barplot(table(midwest.df$mean))
barplot(table(midwest.df$mean))
barplot(table(midwest.df$mean))
table(midwest.df$mean)
barplot(table(midwest.df$mean))
ggplot(midwest.df,aes(x=mean)) +
geom_bar()
ggplot(midwest.df,aes(x=mean)) +
geom_bar()
midwest.df <- midwest.df %>%
mutate(mean = ifelse(percasian > mean(percasian),'over', 'under'))
midwest.df
table(midwest.df$mean)
barplot(table(midwest.df$mean))
ggplot(midwest.df,
aes(x = mean))
ggplot(midwest.df,
aes(x = mean)) +
geom_bar()
namse(midwest.df)
names(midwest.df)
midwest.df <- midwest.df %>%
mutate(percyouth = (total - popadults)/total * 100)
midwest.df %>%
select(county, percyouth) %>%
arrange(percyouth) %>%
head(5)
arrange(desc(percyouth) %>%
midwest.df %>%
select(county, percyouth) %>%
arrange(desc(percyouth) %>%
head(5)
midwest.df %>%
select(county, percyouth) %>%
arrange(desc(percyouth)) %>%
head(5)
midwest.df %>%
select(county, percyouth) %>%
arrange(desc(percyouth)) %>%
head(5)
names(midwest.df)
midwest.df <- midwest.df %>%
mutate(ratio_asian = asian/total * 100)
midwest.df %>%
select(state, county, ratio_asian) %>%
arrange(percyouth) %>%
head(10)
midwest.df %>%
select(state, county, ratio_asian) %>%
arrange(ratio_asian) %>%
head(10)
ifelse(percyouth >= '30', 'middle', 'small'))
ifelse(percyouth >= '30', 'middle', 'small'))
midwest.df <- midwest.df %>%
mutate(gradeyouth = ifelse(percyouth >= '40', 'large' ,
ifelse(percyouth >= '30', 'middle', 'small')))
ggplot(midwest.df ,
aes(x = gradeyouth)) +
geom_bar()
dataset <- read.csv(file.choose())
dataset
str(dataset)
dim(dataset)
names(dataset)
dataset$resident2 <- as.factor(dataset$resident2)
dataset$gender2 <- as.factor(dataset$gender2)
r.g.tbl <- table(dataset$resident2, dataset$gender2)
r.g.tbl
barplot(r.g.tbl)
class(r.g.tbl)
r.g.df <- as.data.frame(r.g.tbl)
r.g.df
ggpolt(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Frep),
stat = 'identity',
position = 'dodge')
ggpolt(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Frep),
stat = 'identity',
position = 'dodge')
# ---------------------
library(ggplot2)
ggpolt(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Frep),
stat = 'identity',
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Frep),
stat = 'identity',
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Frep),
stat = 'identity',
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Freq),
stat = 'identity',
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Freq),
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Freq),
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Freq),
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Freq),
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x= Var2, y = Var1 , fill = Freq),
stat='identity,
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x = Freq  , y = Var2  , fill = Var1)) +
geom_bar(stat = 'identity' ,
position = 'dodge')
ggplot(r.g.df) +
geom_bar(aes(x = Freq  , y = Var2  , fill = Var1)) +
stat = 'identity' ,
position = 'dodge')
ggplot(r.g.df) +
aes(x = Freq  , y = Var2  , fill = Var1)) +
geom_bar(stat = 'identity' ,
position = 'dodge')
ggplot(r.g.df) +
aes(x = Freq  , y = Var2  , fill = Var1)) +
geom_bar(stat = 'identity' ,
position = 'dodge')
ggplot(r.g.df) +
aes(x = Freq  , y = Var2  , fill = Var1)) +
geom_bar(stat = 'identity' ,
position = 'dodge')
ggplot(r.g.df) +
aes(x = Freq  , y = Var2  , fill = Var1)) +
geom_bar(stat = 'identity' ,
position = 'dodge')
# ---------------------
library(ggplot2)
ggplot(r.g.df) +
aes(x = Freq  , y = Var2  , fill = Var1)) +
geom_bar(stat = 'identity' ,
position = 'dodge')
ggplot(data = r.g.df,
aes(x = age , fill = job2)) +
geom_bar()
r.g.df
r.g.tbl
ggplot(data = dataset,
aes(x = age , fill = job2)) +
geom_bar()
# ---------------------
library(ggplot2)
seoul_subway <- read.csv(file.choose())
seoul_subway <- read.csv(file.choose())
seoul_subway
str(seoul_subway)
head(seoul_subway)
str(seoul_subway)
ggplot(seoul_subway ,
aes(x = AVG ONEDAY , y = RUNNINGTIMES_WEEKDAYS)) +
geom_point(aes(col = LINE , size = AVG_CROWDNESS))
ggplot(seoul_subway ,
aes(x = AVG ONEDAY , y = RUNNINGTIMES_WEEKDAYS)) +
geom_point(aes(col = LINE , size = AVG_CROWDNESS))
ggplot(seoul_subway ,
aes(x = AVG_ONEDAY , y = RUNNINGTIMES_WEEKDAYS)) +
geom_point(aes(col = LINE , size = AVG_CROWDEDNESS))
ggplot(seoul_subway ,
aes(x = LINE , y = AVG_ONEDAY)) +
geom_bar(stat = 'identity')
dataset <- read.csv(file.choose(), header = T)
str(dataset)
head(dataset)
names(dataset)
table(is.na(dataset))
library(MASS)
dataset[ !complete.cases(dataset)]
dataset[ !complete.cases(dataset) , ]
table(is.na(dataset))
library(MASS)
dataset[ !complete.cases(dataset) , ]
table(is.na(dataset))
library(MASS)
dataset[ !complete.cases(dataset) , ]
table(is.na(dataset))
library(MASS)
dataset[ !complete.cases(dataset) , ]
table(is.na(dataset))
library(MASS)
dataset[ !complete.cases(dataset) , ]
dataset.new <- na.omit(dataset)
table(is.na(dataset.new))
str(dataset.new)
ifelse(is.na(price) , 0 , price)
install.packages('caret')
install.packages('caret')
library(caret)
# ---------------------
library(ggplot2)
dataset.new <- na.omit(dataset)
table(is.na(dataset.new))
str(dataset.new)
price <- dataset$price
ifelse(is.na(price) , 0 , price)
mean(dataset$price , na,rm = T)
ifelse(is.na(price) , 0 , price)
ifelse(is.na(price) , mean(dataset$price) , price)
mean(dataset$price , na.rm = T)
ifelse(is.na(price) , mean(dataset$price) , price)
ifelse(is.na(price) , mean(dataset$price) , dataset$price)
mean(dataset$price , na.rm = T)
ifelse(is.na(price) , mean(dataset$price) , dataset$price)
price.avg <- mean(dataset$price , na.rm = T)
dataset$type <- rep(1:3 , 100)
price.avg <- mean(dataset$price , na.rm = T)
dataset$type <- rep(1:3 , 100)
for ( i in 1 : nrow(dataset)) {
if(dataset$type[i] == 1) {
temp[i] = dataset$type[i] * 1.5
} else if (dataset$type[i]) == 2) {
temp[i] = dataset$type[i] * 1.0
} else {
temp[i] =dataset$type[i] * 0.5
}
}
for ( i in 1 : nrow(dataset)) {
if(dataset$type[i] == 1) {
temp[i] = dataset$type[i] * 1.5
} else if (dataset$type[i]) == 2) {
temp[i] = dataset$type[i] * 1.0
} else {
temp[i] =dataset$type[i] * 0.5
}
}
temp
temp = c()
for(i in 1:nrow(dataset)) {
if(dataset$type[i] == 1) {
temp[i] = dataset$type[i] * 1.5
}else if(dataset$type[i] == 2){
temp[i] = dataset$type[i] * 1.0
}else {
temp[i] = dataset$type[i] * 0.5
}
}
temp
dataset[ !complete.cases(dataset) , ]
install.packages('caret')
library(caret)
library(caret)
dataset.new <- na.omit(dataset)
table(is.na(dataset.new))
str(dataset.new)
for(i in 1:nrow(dataset)) {
if(dataset$type[i] == 1) {
temp[i] = dataset$type[i] * 1.5
}else if(dataset$type[i] == 2){
temp[i] = dataset$type[i] * 1.0
}else {
temp[i] = dataset$type[i] * 0.5
}
}
dataset %>% mutate(priceState = ifelse(type==1,type*1.5,
ifelse(type==2,type*1, type*0.5)))
# ---------------------
library(ggplot2)
dataset %>%
mutate(priceState = ifelse(type==1,type*1.5,
ifelse(type==2,type*1, type*0.5)))
str(dataset.new)
ifelse(is.na(price) , 0 , price)
ifelse(is.na(dataset$price) , mean(dataset$price , na.rm = T) , dataset$price)
if(dataset$type[i] == 1) {
temp[i] = dataset$type[i] * 1.5
}else if(dataset$type[i] == 2){
temp[i] = dataset$type[i] * 1.0
}else {
temp[i] = dataset$type[i] * 0.5
}
dataset %>% mutate(priceState = ifelse(type==1,type*1.5,
ifelse(type==2,type*1, type*0.5)))
range(gender)
gender <- dataset$gender
range(gender)
table(gender)
gender.subser <- subset(dataset, gender == 1 | gender == 2)
gender.subset <- subset(dataset, gender == 1 | gender == 2)
gender.subset
gender.subset$gender <- as.factor(gender.subset$gender)
str(gender.subset)
- 연속형 변수의 경우 이상치 제거
seq.price <- dataset$pserice
length(seq.price)
summary(seq.price)
boxplot(seq.price)
dataset <- subset(dataset , seq.price >= 2.2875 & seq.price <= 8.2125)
dataset
dataset <- subset(dataset , seq.price >= 2.2875 & seq.price <= 8.2125)
dataset
library(stringr)
library(dplyr)
dataset.raw <- read_excel(file.choose())
dataset.raw <- read_excel(file.choose())
str(dataset.raw)
dataset.raw
install.packages('rjava')
install.packages('DBI')
install.packages('RJDBC')
install.packages('rjava')
install.packages('rjava')
